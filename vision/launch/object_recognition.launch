<launch>
  <arg name="BASE_FRAME_ID" default="camera_link" />
  <arg name="RUN_SELF_FILTER" default="false"/>
  <arg name="JOINT_STATIC_FILTER" default="false" />
  <arg name="FILTER_JOINT_PARAM" value="$(find jsk_pcl_ros)/config/pr2_sensor_joint.yaml" />
  <arg name="INPUT" default="/camera/depth_registered/points" />
  <arg name="LAUNCH_MANAGER" default="true" />
  <arg name="LAUNCH_REALSENSE" default="false" />
  <arg name="LAUNCH_RVIZ" default="true" />
  <arg name="DETECT_CLUSTER" default="true" />
  <arg name="PUBLISH_BOX_TF" default="true" />
  <arg name="DETECT_COLOR" default="true" />
  <arg name="DETECT_SHAPE" default="true" />
  <arg name="MANAGER" default="object_recognition_manager" />
  <arg name="MACHINE" default="localhost"/>
  <arg name="GDB" default="false" />
  <machine name="localhost" address="localhost" />
  <group if="$(arg LAUNCH_MANAGER)">
    <node pkg="nodelet" type="nodelet" name="$(arg MANAGER)"
          args="manager"
          machine="$(arg MACHINE)"
          if="$(arg GDB)"
          launch-prefix="xterm -e gdb --args"
          output="screen"/>
    <node pkg="nodelet" type="nodelet" name="$(arg MANAGER)"
          args="manager"
          machine="$(arg MACHINE)"
          unless="$(arg GDB)"
          output="screen"/>
  </group>

  <!-- realsense driver -->
  <include file="$(find realsense2_camera)/launch/rs_rgbd.launch"
        if="$(arg LAUNCH_REALSENSE)"/>

    <!-- visualization -->
  <node name="rviz_tabletop" pkg="rviz" type="rviz"
        args=" -d $(find vision)/config/tabletop.rviz"
        if="$(arg LAUNCH_RVIZ)"/>
  
  <group if="$(arg RUN_SELF_FILTER)">
    <arg name="SELF_FILTER_PARAM" default="$(find jsk_pr2_startup)/jsk_pr2_sensors/tilt_self_filter.yaml" />
    <node pkg="pr2_navigation_self_filter"
          type="self_filter" clear_params="true"
          name="openni_cloud_self_filter" respawn="true" output="screen">
      <remap from="cloud_in" to="$(arg INPUT)" />
      <remap from="cloud_out" to="~cloud_out" />
      <rosparam command="load" file="$(arg SELF_FILTER_PARAM)" />
      <param name="use_rgb" value="true" />
      <param name="keep_organized" value="true"/>
      <param name="subsample_value" type="double" value="0.0"/>
    </node>
  </group>

  <node pkg="nodelet" type="nodelet" name="input_relay"
        machine="$(arg MACHINE)"
        args="load jsk_topic_tools/Relay $(arg MANAGER)">
    <remap from="~input" to="$(arg INPUT)" unless="$(arg RUN_SELF_FILTER)" />
    <remap from="~input" to="openni_cloud_self_filter/cloud_out" if="$(arg RUN_SELF_FILTER)" />
    <remap from="~output" to="~raw_output" if="$(arg JOINT_STATIC_FILTER)" />
  </node>
  
  <node pkg="nodelet" type="nodelet" name="joint_static_filter"
        if="$(arg JOINT_STATIC_FILTER)"
        machine="$(arg MACHINE)"
        args="load jsk_pcl/JointStateStaticFilter /$(arg MANAGER)">
    <remap from="~input_joint_state" to="/joint_states" />
    <remap from="~input" to="input_relay/raw_output"/>
    <remap from="~output" to="input_relay/output" />
    <rosparam command="load" file="$(arg FILTER_JOINT_PARAM)" />
  </node>

 <node pkg="nodelet" type="nodelet" name="passthrough_filter"
        machine="$(arg MACHINE)"
        args="load jsk_pcl/OrganizedPassThrough /$(arg MANAGER)">
        <remap from="~input" to="input_relay/output"/>
        <remap from="~output" to="passthrough/output" />
        <rosparam>
          min_index: 10
          max_index: 320
          filter_field: 1
      </rosparam>
 </node>

  <node pkg="nodelet" type="nodelet" name="multi_plane_estimate"
        machine="$(arg MACHINE)"
        args="load jsk_pcl/OrganizedMultiPlaneSegmentation $(arg MANAGER)"
        clear_params="false">
    <remap from="~input" to="passthrough/output"/>
    <rosparam>
      distance_threshold: 0.01
      angular_threshold: 0.02
      max_depth_change_factor: 0.01
      min_size: 7500
      max_curvature: 0.001
      estimation_method: 1
      estimate_normal: true
      publish_normal: true

      <!--distance_threshold: 0.01
      angular_threshold: 0.02
      max_depth_change_factor: 0.005
      min_size: 7500
      max_curvature: 0.02
      estimation_method: 1
      estimate_normal: true
      publish_normal: true-->

      <!--distance_threshold: 0.05
      angular_threshold: 0.01
      max_depth_change_factor: 0.002
      min_size: 7500
      max_curvature: 0.005
      estimation_method: 0
      estimate_normal: true
      publish_normal: true-->
    </rosparam>
  </node>

  <group if="$(arg DETECT_CLUSTER)">
    <node pkg="nodelet" type="nodelet"
          name="plane_extraction"
          machine="$(arg MACHINE)"
          args="load jsk_pcl/MultiPlaneExtraction $(arg MANAGER)"
          output="screen">
      <remap from="~input" to="passthrough/output" />
      <remap from="~indices" to="/multi_plane_estimate/output_refined" />
      <remap from="~input_polygons" to="/multi_plane_estimate/output_refined_polygon" />
      <remap from="~input_coefficients" to="/multi_plane_estimate/output_refined_coefficients" />
      <rosparam>
        min_height: 0
        max_height: 0.5
        use_coefficients: true
      </rosparam>
    </node>

      <node name="downsample_input"
        pkg="nodelet" type="nodelet"
        args="load pcl/VoxelGrid $(arg MANAGER)">
        <remap from="~input" to="plane_extraction/output"/>
        <rosparam>
          filter_field_name: z
          filter_limit_min: -10000
          filter_limit_max: 10000
          keep_organized: true
          leaf_size: 0.001
        </rosparam>
    </node>


    <node pkg="nodelet" type="nodelet" name="color_filtering"
          machine="$(arg MACHINE)"
          args="load jsk_pcl/RGBColorFilter /$(arg MANAGER)" output="screen">
      <remap from="~input" to="/downsample_input/output" />
      <param name="r_limit_max" value="220" />
      <param name="r_limit_min" value="90" />
      <param name="g_limit_max" value="220" />
      <param name="g_limit_min" value="90" />
      <param name="b_limit_max" value="220" />
      <param name="b_limit_min" value="90" />
      <rosparam> keep_organized: true
      </rosparam>
    </node>

    <node pkg="nodelet" type="nodelet" name="color_filtering_extraction"
          machine="$(arg MACHINE)"
          args="load jsk_pcl_utils/PointCloudToPointIndices /$(arg MANAGER)" output="screen">
      <remap from="~input" to="/color_filtering/output" />
    </node>

    <node pkg="nodelet" type="nodelet" name="plane_extraction_refined"
          machine="$(arg MACHINE)"
          args="load jsk_pcl/ExtractIndices /$(arg MANAGER)" output="screen">
      <remap from="~input" to="/downsample_input/output" />
      <remap from="~indices" to="/color_filtering_extraction/output" />
      <rosparam>
        keep_organized: true
        approximate_sync: true
        negative: true
      </rosparam>
    </node>

    <node pkg="nodelet" type="nodelet" name="euclidean_clustering"
          machine="$(arg MACHINE)"
          args="load jsk_pcl/EuclideanClustering /$(arg MANAGER)" output="screen">
      <remap from="~input" to="/plane_extraction_refined/output" />
      <rosparam>
        <!--tolerance: 0.011
        min_size: 1000-->
        tolerance: 0.002
        min_size: 400
      </rosparam>
    </node>

    <node pkg="nodelet" type="nodelet"
          name="cluster_decomposer_final"
          machine="$(arg MACHINE)"
          args="load jsk_pcl/ClusterPointIndicesDecomposer /$(arg MANAGER)"
          output="screen">
      <remap from="~input" to="/downsample_input/output" />
      <remap from="~target" to="/euclidean_clustering/output" />
      <remap from="~align_planes" to="/multi_plane_estimate/output_refined_polygon" />
      <remap from="~align_planes_coefficients"
            to="/multi_plane_estimate/output_refined_coefficients" />
      <rosparam>
        align_boxes: true
        sort_by: input_indices
        use_pca: true
        publish_clouds: true
        publish_tf: true
      </rosparam>
      <rosparam if="$(arg PUBLISH_BOX_TF)">
        publish_tf: true
      </rosparam>
      <rosparam unless="$(arg PUBLISH_BOX_TF)">
        publish_tf: false
      </rosparam>
    </node>
    <node name="bounding_box_filter"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl/BoundingBoxFilter /$(arg MANAGER)">
      <remap from="~input_box" to="cluster_decomposer_final/boxes" />
      <remap from="~input_indices" to="/euclidean_clustering/output" />
    </node>

    <node pkg="jsk_interactive_marker"
          type="bounding_box_marker"
          machine="$(arg MACHINE)"
          name="bounding_box_marker"
          output="screen"
          >
      <remap from="~bounding_box_array" to="cluster_decomposer_final/boxes" />
    </node>
  </group> 

  <group if="$(arg DETECT_SHAPE)">

    <node name="centroid_publisher"
        pkg="nodelet" type="nodelet"
        args="load jsk_pcl_utils/CentroidPublisher /$(arg MANAGER)">
        <remap from="~input/polygons" to="/multi_plane_estimate/output_refined_polygon" />
        <rosparam>
          publish_tf: true
          frame: table
        </rosparam>
    </node>

    <node name="pcd_to_pointcloud"
        pkg="nodelet" type="nodelet"
        args="load jsk_pcl/PointcloudDatabaseServer /$(arg MANAGER)">
        <rosparam>
          models: [/home/dito/catkin_ws/src/vision/data/cube2.pcd,/home/dito/catkin_ws/src/vision/data/cuboid2.pcd,/home/dito/catkin_ws/src/vision/data/cylinder.pcd]
        </rosparam>
    </node>

    <node name="icp"
        pkg="vision" type="icp.py" output="screen">
    </node>
    
  </group>
  
  <group if="$(arg DETECT_COLOR)">
     <node name="color_histogram"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl/ColorHistogram /$(arg MANAGER)">
      <remap from="~input" to="/plane_extraction_refined/output"/>
      <remap from="~input/indices" to="/euclidean_clustering/output" />
      <rosparam>
        bin_size: 10
        histogram_policy: 0
      </rosparam>
    </node>

    <node name="color_histogram_visualizer"
          pkg="jsk_pcl_ros" type="color_histogram_visualizer.py" output="screen">
      <remap from="~input/array" to="color_histogram/output"/>
      <rosparam>
        histogram_policy: 0
        histogram_index: 0
        histogram_scale: 1.0
      </rosparam>
    </node>

    <node name="color_histogram_classifier"
          pkg="nodelet" type="nodelet"
          args="load jsk_pcl/ColorHistogramClassifier /$(arg MANAGER)">
      <remap from="~input/array" to="color_histogram/output" />
      <rosparam command="load" file="labels.yaml" />
    </node>

    <node name="classification_result_visualizer"
          pkg="vision" type="classification_result_visualizer.py">
      <remap from="~input/boxes" to="cluster_decomposer_final/boxes"/>
      <remap from="~input/colors" to="color_histogram_classifier/output" />
      <remap from="~input/objects" to="icp/output" />
      <rosparam>
        text_offset_x: 0.0
        text_offset_y: -0.03
        text_offset_z: 0.0
        text_size: 0.015
        text_color_red: 1
        text_color_green: 0
        text_color_blue: 0
      </rosparam>
    </node>

  </group>

  
</launch>
